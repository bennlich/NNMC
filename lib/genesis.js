// Generated by CoffeeScript 1.6.3
(function() {
  var DataSet, u, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  u = ABM.util;

  DataSet = ABM.DataSet;

  ABM.models.Genesis = (function(_super) {
    __extends(Genesis, _super);

    function Genesis() {
      _ref = Genesis.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Genesis.prototype.startup = function() {
      var _this = this;
      console.log("startup");
      console.log("..loading elevation asc file");
      this.elevation = DataSet.importAscDataSet("data/elevation640x480.asc", function() {
        var _ref1;
        console.log("..creating slope/aspect data sets");
        return _ref1 = _this.elevation.slopeAndAspect(), _this.slope = _ref1[0], _this.aspect = _ref1[1], _this.dzdx = _ref1[2], _this.dzdy = _ref1[3], _ref1;
      });
      console.log("..loading data/water file");
      return this.patches.importColors("data/waterMap.png", function() {
        var i, p, _i, _j, _k, _len, _len1, _ref1, _ref2, _results;
        console.log("..creating water patch variable via diffusion");
        _ref1 = _this.patches;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          p = _ref1[_i];
          p.water = p.color[0] / 25.5;
        }
        for (i = _j = 1; _j <= 20; i = ++_j) {
          _this.patches.diffuse("water", 0.5);
        }
        console.log("..setting patch color and water");
        _ref2 = _this.patches;
        _results = [];
        for (_k = 0, _len1 = _ref2.length; _k < _len1; _k++) {
          p = _ref2[_k];
          u.setGray(p.color, p.water * 25.5);
          _results.push(p.water = p.water / 10);
        }
        return _results;
      });
    };

    Genesis.prototype.setup = function() {
      var p, _i, _len, _ref1;
      console.log("setup");
      this.refreshPatches = this.refreshLinks = false;
      this.patches.own("water");
      this.agentBreeds("drops junipers ponderosas");
      this.vision = 2;
      this.speed = .25;
      this.drops.setDefault("shape", "square");
      this.drops.setDefault("color", [0, 0, 255, 30 / 255]);
      this.patches.cacheRect(this.vision, false);
      this.anim.setRate(10, true);
      console.log("..drawing elevation");
      this.elevation.toDrawing(true);
      console.log("..setting patch elevation value");
      this.elevation.toPatchVar("elevation");
      console.log("..creating agents");
      _ref1 = this.patches.nOf(Math.min(this.patches.length, 6000));
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        p = _ref1[_i];
        p.sprout(1, this.drops, function(drop) {});
      }
      this.drops.setDefault("penDown", true);
      return console.log("patches: " + this.patches.length + ", agents: " + this.agents.length);
    };

    Genesis.prototype.resetWater = function() {
      var p, _i, _len, _ref1, _results;
      this.drops.clear();
      this.drawing.clear();
      _ref1 = this.patches.nOf(Math.min(this.patches.length, 6000));
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        p = _ref1[_i];
        _results.push(p.sprout(1, this.drops, function(drop) {
          return drop.penDown();
        }));
      }
      return _results;
    };

    Genesis.prototype.flowDownhill = function() {
      var drop, _i, _len, _ref1, _results;
      _ref1 = this.drops;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        drop = _ref1[_i];
        drop.heading = this.aspect.patchSample(drop.x, drop.y);
        _results.push(drop.forward(u.randomNormal(0.1, 0.1)));
      }
      return _results;
    };

    Genesis.prototype.step = function() {
      var drop, moved, n, _i, _len, _ref1;
      moved = 0;
      _ref1 = this.drops;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        drop = _ref1[_i];
        n = drop.p.pRect.minOneOf("elevation");
        if (drop.p.elevation > n.elevation) {
          drop.face(n);
          drop.forward(this.speed);
          moved++;
        }
      }
      if (moved === 0) {
        console.log("done, ticks: " + this.anim.ticks);
        this.stop();
      }
      if (this.anim.ticks % 100 === 0) {
        console.log(this.anim.toString(), "moved: " + moved);
      }
      return null;
    };

    Genesis.prototype.drawLandCover = function() {
      return this.patches.importDrawing("data/nlcd.png");
    };

    Genesis.prototype.drawAerial = function() {
      return this.patches.importDrawing("data/naip2.png");
    };

    Genesis.prototype.drawShaded = function() {
      return this.patches.importDrawing("data/shadedelevation.png");
    };

    Genesis.prototype.drawWater = function() {
      return this.patches.importDrawing("data/waterMap.png");
    };

    Genesis.prototype.drawElevation = function() {
      return this.elevation.toDrawing();
    };

    Genesis.prototype.drawSlope = function() {
      return this.slope.toDrawing();
    };

    Genesis.prototype.drawAspect = function() {
      return this.aspect.toDrawing();
    };

    Genesis.prototype.drawDzdx = function() {
      return this.dzdx.toDrawing();
    };

    Genesis.prototype.drawDzdy = function() {
      return this.dzdy.toDrawing();
    };

    Genesis.prototype.drawAspect = function() {
      return this.aspect.toDrawing();
    };

    Genesis.prototype.drawWaterSet = function() {
      return DataSet.patchDataSet("water").toDrawing();
    };

    return Genesis;

  })(ABM.Model);

}).call(this);

/*
//@ sourceMappingURL=genesis.map
*/
